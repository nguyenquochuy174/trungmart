import classNames from 'classnames/bind';
import styles from './MessageSell.module.scss';
import { useState, useEffect, useRef } from 'react';
import { useParams } from 'react-router-dom';
import { chatMessages, listUser } from '~/constant/mock-data';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import {
    faClose,
    faPaperPlane,
    faUpload,
} from '@fortawesome/free-solid-svg-icons';

const cx = classNames.bind(styles);

function MessageSell() {
    const userId = parseInt(localStorage.getItem('idSell'));
    const { idUser } = useParams();
    
    const shop = listUser.find((s) => s.id === parseInt(idUser));
    const [messageInput, setMessageInput] = useState('');
    const [messages, setMessages] = useState([]);
    const [selectedFiles, setSelectedFiles] = useState([]);
    useEffect(() => {
        const newChatMessages = chatMessages
            .filter(
                (msg) =>
                    (msg.idSend === userId && shop && msg.idReceive === shop.id) ||
                    (msg.idReceive === userId && shop && msg.idSend === shop.id),
            )
            .sort((a, b) => new Date(a.time) - new Date(b.time));

        setMessages(newChatMessages);
       
    }, [idUser,shop,userId]);
    /**
     * useEffect n√†y ch·∫°y m·ªói khi idUser, shop, userId thay ƒë·ªïi.
            L·ªçc ra tin nh·∫Øn gi·ªØa user hi·ªán t·∫°i v√† shop.
            S·∫Øp x·∫øp theo th·ªùi gian tƒÉng d·∫ßn.
            C·∫≠p nh·∫≠t state messages.
     */

    const messagesEndRef = useRef(null);
    /**useRef c√≥ th·ªÉ l∆∞u tr·ªØ b·∫•t c·ª© gi√° tr·ªã n√†o m√† b·∫°n kh√¥ng mu·ªën ƒë∆∞a v√†o state. 
     * Kh√°c v·ªõi useState, thay ƒë·ªïi gi√° tr·ªã trong useRef kh√¥ng khi·∫øn component re-render. */

    useEffect(() => {
        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    }, [messages]); // t·ª± ƒë·ªông cu·ªën xu·ªëng tin nh·∫Øn

    if (!shop) return <div className={cx('no-chat')}>Kh√¥ng t√¨m th·∫•y shop</div>;

    const getChatId = (messages) => {
        const maxId = messages.reduce((max, msg) => {
            const match = msg.idChat.match(/^msg(\d+)$/);
            if (match) {
                const num = parseInt(match[1], 10); // chuy·ªÉn chu·ªói th√†nh h·ªá s·ªë 10
                return Math.max(max, num); // c·∫≠p nh·∫≠t gi√° tr·ªã l·ªõn nh·∫•t
            }
            return max;
        }, 0);

        return `msg${maxId + 1}`;//TƒÉng maxId l√™n 1 ‚Üí ƒë·∫£m b·∫£o id m·ªõi kh√¥ng tr√πng v·ªõi id ƒë√£ t·ªìn t·∫°i.
        /**
         * useEffect n√†y ch·∫°y m·ªói khi idUser, shop, userId thay ƒë·ªïi.
                L·ªçc ra tin nh·∫Øn gi·ªØa user hi·ªán t·∫°i v√† shop.
                S·∫Øp x·∫øp theo th·ªùi gian tƒÉng d·∫ßn.
                C·∫≠p nh·∫≠t state messages.
         */
    };

    const handleSend = () => {
        const trimmed = messageInput.trim();
        if (!trimmed && selectedFiles.length === 0) return;

        const newMessages = [];

        selectedFiles.forEach((file) => {
            const isImage = file.type.startsWith('image/');
            const fileUrl = URL.createObjectURL(file);//t·∫°o link t·∫°m th·ªùi ƒë·ªÉ preview ho·∫∑c download file

            newMessages.push({
                idChat: getChatId([...messages, ...newMessages]),
                idSend: userId,
                idReceive: shop.id,
                content: fileUrl,
                fileName: file.name,
                fileType: file.type,
                time: new Date().toISOString(),
                type: isImage ? 'image' : 'file',
            });
        });

        if (trimmed) {
            newMessages.push({
                idChat: getChatId([...messages, ...newMessages]),
                idSend: userId,
                idReceive: shop.id,
                content: trimmed,
                time: new Date().toISOString(),
                type: 'text',
            });
        }

        setMessages((prev) => [...prev, ...newMessages]);//Th√™m newMessages v√†o cu·ªëi state messages
        setMessageInput('');
        setSelectedFiles([]);
        /**Reset input text v√† danh s√°ch file ƒë√£ ch·ªçn.
Nh·ªù React re-render ‚Üí tin nh·∫Øn m·ªõi hi·ªÉn th·ªã ngay */
    };

    const handleKeyPress = (e) => {
        if (e.key === 'Enter') {
            e.preventDefault();
            handleSend(); // g·ªçi h√†m ƒë·ªÉ g·ª≠i tin nh·∫Øn 
        }
    };

    return (
        <div className={cx('message-detail')}>
            <div className={cx('header')}>
                <img
                    src={shop.avatar}
                    alt={shop.name}
                    className={cx('avatar')}
                />
                <h3 className={cx('shop-name')}>{shop.name}</h3>
            </div>

            <div className={cx('messages')}>
                {messages.map((msg) => (
                    <div
                        key={msg.idChat}
                        className={cx('message', {
                            'from-user': msg.idSend === userId,
                            'from-shop': msg.idSend !== userId,
                        })}
                    >
                        {msg.type === 'image' ? (
                            <img
                                src={msg.content}
                                alt="img"
                                className={cx('image-message')}
                            />
                        ) : msg.type === 'file' ? (
                            <a
                                href={msg.content}
                                download={msg.fileName}
                                className={cx('file-message')}
                                target="_blank"
                                rel="noopener noreferrer"
                            >
                                üìé {msg.fileName}
                            </a>
                        ) : (
                            <p className={cx('content')}>{msg.content}</p>
                        )}
                        <span className={cx('time')}>
                            {new Date(msg.time).toLocaleTimeString('vi-VN')}
                        </span>
                    </div>
                ))}
                <div ref={messagesEndRef} />
            </div>
           
            <div className={cx('input-box')}>
                <input
                    type="text"
                    placeholder="Nh·∫≠p n·ªôi dung tin nh·∫Øn..."
                    value={messageInput}
                    onChange={(e) => setMessageInput(e.target.value)}
                    onKeyDown={handleKeyPress}
                />
                <label className={cx('icon')}>
                    <FontAwesomeIcon icon={faUpload} />
                    <input
                        type="file"
                        multiple
                        onChange={(e) =>
                            setSelectedFiles(Array.from(e.target.files))
                        }
                        hidden
                    />
                </label>
                <FontAwesomeIcon
                    icon={faPaperPlane}
                    className={cx('icon')}
                    onClick={handleSend}
                />
            </div>
        </div>
    );
}

export default MessageSell;
